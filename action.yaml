name: DPy Action
description: Analyzes the newly commited code, detects comprehensive set of code smells, and archives the results.
branding:
  color: "orange"
  icon: "arrow-up-right"
inputs:
  PAT:
    description: "Personal access token"
    default: "No PAT provided"
  D_KEY:
    description: "Designite license key - optional"
    default: "No key"
  OS:
    description: "Operating System of the runner to choose the appropriate DPy binary"
    default: "linux"
  BRANCH:
    description: "Branch to analyze - optional"
    default: "main"
  FORMAT:
    description: "Output format - optional"
    default: "csv"
  API_KEY:
    description: "DCode API key for authentication"
    required: false
  PROJECT_ID:
    description: "DCode project ID"
    required: false
runs:
  using: "composite"
  steps:
    - name: Download DPy
      run: |
        if [[ "${{inputs.OS}}" == "linux" ]]; then
        wget "https://www.designite-tools.com/assets/DPy-linux.zip"
        unzip DPy-linux.zip
        fi
        if [[ "${{inputs.OS}}" == "windows" ]]; then
        wget "https://www.designite-tools.com/assets/DPy-windows.zip"
        unzip DPy-windows.zip
        fi
        if [[ "${{inputs.OS}}" == "mac" ]]; then
        wget "https://www.designite-tools.com/assets/DPy-macos.zip"
        unzip DPy-macos.zip
        fi
      shell: bash
    - name: Analyze project with DPy
      run: |
        DPY_CMD=$([[ "${{inputs.OS}}" == "windows" ]] && echo "DPy.exe" || echo "./DPy")
        BASE_CMD="$DPY_CMD analyze-in-ci -repo ${{ github.server_url }}/${{ github.repository }}.git -pat ${{ inputs.PAT }} -o designite-output -b ${{ inputs.BRANCH }} -f ${{ inputs.FORMAT }}"
        if [[ "${{inputs.D_KEY}}" != "No key" ]]; then
          BASE_CMD+=" -k ${{ inputs.D_KEY }}"
        fi
        echo $BASE_CMD
        $BASE_CMD
      shell: bash
    - name: Archive Designite results
      uses: actions/upload-artifact@v4
      with:
        name: designite-output-${{ github.sha }}
        path: "designite-output"
    - name: Store analysis results on DCode platform, if configured
      shell: bash
      run: |
        if [ -n "${{ inputs.API_KEY }}" ]; then
          echo "DCode API key is configured. Uploading the analysis results on DCode..."
          # Build -F arguments with numbered keys file1, file2, ...
          form_args=()
          counter=1
          for file in designite-output/*; do
            if [ -f "$file" ]; then
              form_args+=(-F "file${counter}=@${file}")
              counter=$((counter + 1))
            fi
          done
          if [ ${#form_args[@]} -eq 0 ]; then
            echo "No files found in folder designite-output."
            exit 1
          fi
          # Build curl command (array to handle spaces safely)
          curl_cmd=("curl" "-s" "-o" "/tmp/curl_output" "-w" "%{http_code}" "-X" "POST" "-H" "X-API-Key: ${{ inputs.api-key }}" "-H" "X-Commit-ID: ${{ github.sha }}" "${form_args[@]}" "https://dcodehub.com/api/projects/${{ inputs.PROJECT_ID }}/upload/")
          safe_cmd=("${curl_cmd[@]}")
          echo "Executing: ${safe_cmd[*]}"
          http_status=$("${curl_cmd[@]}")
          echo "HTTP status code: $http_status"

          echo "API response:"
          cat /tmp/curl_output
        else
          echo "DCode API key not set. Skipping uploading analysis results to DCode."
        fi
